# #################################120
# Basic training parameters for speaker-id. We have first a network that
# computes some embeddings. On the top of that, we employ a classifier.
#
# Author:
#  * Mirco Ravanelli 2021
# #################################

# Seed needs to be set at top of yaml, before objects with parameters are made
seed: 42
__set_seed: !!python/object/apply:torch.manual_seed [!ref <seed>]

# defining the data, output and save folder
data_folder: ./data
output_folder: !ref ./results/digit_class/<seed>
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt
rir_folder: !ref <data_folder>

# Path where data manifest files will be stored
# The data manifest files are created by the data preparation script.
train_annotation: train.json
valid_annotation: valid.json
test_annotation: test.json
split_ratio: [.8, .1, .1]
do_random_split: False
skip_prep: False

# The train logger writes training statistics to a file, as well as stdout.
train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>

error_stats: !name:speechbrain.utils.Accuracy.AccuracyStats

ckpt_interval_minutes: 15 # save checkpoint every N min

# Feature parameters
n_mels: 40

# Training Parameters
sample_rate: 8000
number_of_epochs: 50
batch_size: 48
lr_start: 0.001
lr_final: 0.0001
n_classes: 10 # In this case, we have 10 digits
emb_dim: 128 # dimensionality of the embeddings
dataloader_options:
    batch_size: !ref <batch_size>



# Feature extraction
compute_features: !new:speechbrain.lobes.features.Fbank
    n_mels: !ref <n_mels>
    win_length: 20
    hop_length: 10


# Mean and std normalization of the input features
mean_var_norm: !new:speechbrain.processing.features.InputNormalization
    norm_type: batch
    mean_norm: True
    std_norm: True

# To design a custom model, either just edit the simple CustomModel
# class that's listed here, or replace this `!new` call with a line
# pointing to a different file you've defined.
# resnet and classifier hyperparameter setting
embedding_model: !new:resnet.ResNet
    in_channels: !ref <n_mels>
    activation: !name:torch.nn.ReLU
    resnet_stages: 3
    block_per_stage: [1,1,1]
    stages_channels: [48, 64, !ref <emb_dim>]
    bottleneck_reduction: 1
    
classifier: !new:resnet.Classifier
    input_shape: [null, null, !ref <emb_dim>]
    activation: !name:torch.nn.ReLU
    lin_blocks: 1
    lin_neurons: !ref <emb_dim>
    out_neurons: !ref <n_classes>

# The first object passed to the Brain class is this "Epoch Counter"
# which is saved by the Checkpointer so that training can be resumed
# if it gets interrupted at any point.
epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <number_of_epochs>

# Objects in "modules" dict will have their parameters moved to the correct
# device, as well as having train()/eval() called on them by the Brain class.
modules:
    compute_features: !ref <compute_features>
    embedding_model: !ref <embedding_model>
    classifier: !ref <classifier>
    mean_var_norm: !ref <mean_var_norm>

# This optimizer will be constructed by the Brain class after all parameters
# are moved to the correct device. Then it will be added to the checkpointer.
opt_class: !name:torch.optim.Adam
    lr: !ref <lr_start>

# This function manages learning rate annealing over the epochs.
# We here use the simple lr annealing method that linearly decreases
# the lr from the initial value to the final one.
lr_annealing: !new:speechbrain.nnet.schedulers.LinearScheduler
    initial_value: !ref <lr_start>
    final_value: !ref <lr_final>
    epoch_count: !ref <number_of_epochs>

# This object is used for saving the state of training both so that it
# can be resumed if it gets interrupted, and also so that the best checkpoint
# can be later loaded for evaluation or inference.
checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        embedding_model: !ref <embedding_model>
        classifier: !ref <classifier>
        normalizer: !ref <mean_var_norm>
        counter: !ref <epoch_counter>
